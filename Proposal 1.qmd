---
title: "Proposal 1"
format: pdf
author: "Names"
editor: visual
---

Proposal One

First proposal of the project

Graph Presentation

```{r, include = FALSE}
library(tidyverse) 
library(nflfastR) 
library(ggimage) 
library(gt) 
library(ggthemes) 
library(ggrepel) 
library(plotly) 
library(vip)
library(ggforce)
library(ggplot2)
library(ggalt)

long_pbp <- load_pbp(1999:2024)

long_pbp %\>% group_by(season) %\>% summarise(n = n())

long_pbp %\>% group_by(play_type) %\>% summarise(n = n())

qbs <- long_pbp %\>% filter(season_type == "REG", !is.na(epa)) %\>% group_by(id, name) %\>% dplyr::summarise( epa = mean(qb_epa), cpoe = mean(cpoe, na.rm = T), n_dropbacks = sum(pass), n_plays = n(), team = last(posteam) ) %\>% ungroup() %\>% filter(n_dropbacks \> 10 & n_plays \> 100)

qbs <- qbs %\>% left_join(teams_colors_logos, by = c('team' = 'team_abbr'))

offense <- long_pbp %\>% group_by(posteam) %\>% summarise(off_epa = mean(epa, na.rm = TRUE))

defense <- long_pbp %\>% group_by(defteam) %\>% summarise(def_epa = mean(epa, na.rm = TRUE))

logos <- teams_colors_logos %\>% dplyr::select(team_abbr, team_logo_espn)
```

```{r, echo = FALSE}
\# Sample offense and defense data (replace with your actual data) offense \<- offense %\>% filter(!is.na(posteam) & posteam != "") defense \<- defense %\>% filter(!is.na(defteam) & defteam != "") off_epa \<- offense$off_epa def_epa <- defense$def_epa team_names \<- offense\$posteam \# Assuming this column contains team abbreviations

# Set up the plotting area (this initializes the plot)

plot(off_epa, def_epa, xlab = "Offense EPA/play", ylab = "Defense EPA/play", main = "NFL Offensive and Defensive EPA per Play 1999-2024", pch = 16, \# Use solid circle to plot points col = "blue", \# Color of points asp = 16/9, \# Set aspect ratio xlim = range(off_epa, na.rm = TRUE), ylim = range(def_epa, na.rm = TRUE) )

# Now add diagonal lines (after plot is initialized)

slopes \<- c(.4, .3, .2, .1, 0, -.1, -.2, -.3) for (i in seq_along(slopes)) { abline(a = slopes\[i\], b = -1.5, col = "gray", lty = "dotted", lwd = 0.5) }

# Add horizontal and vertical reference lines (after plot is initialized)

abline(h = mean(off_epa, na.rm = TRUE), col = "red", lty = "dashed") abline(v = mean(def_epa, na.rm = TRUE), col = "red", lty = "dashed")

# Label the points with team names

text(off_epa, def_epa, labels = team_names, pos = 4, cex = 0.8, col = "black")
```

```{r, echo = FALSE}
\## Filtering Data for future plots first_pbp \<- load_pbp(1999:2010) second_pbp \<- load_pbp(2011:2024)

# Getting just 4th downs

fourth_downs_first <- first_pbp \|\> filter(down == 4, !is.na(play_type))

fourth_downs_first <- fourth_downs_first %\>% filter(!is.na(yardline_100) & !is.na(ydstogo) & !is.na(wp))

# See what usually happens on 4th down

fourth_downs_first \|\> group_by(play_type) \|\> tally(sort = T) \|\> print(n = 10)

# Creating an indicator variable

fourth_downs_first <- fourth_downs_first \|\> mutate(went_for_it = ifelse(play_type %in% c("pass", "run"), 1, 0))
```

Yards to go bar plot

```{r, echo = FALSE}
ydstogo_summary <- fourth_downs_first %\>% group_by(ydstogo) %\>% summarize(count = n(), went_for_it_rate = mean(went_for_it)) %\>% filter(count \>= 5)

barplot(ydstogo_summary$went_for_it_rate, names.arg = ydstogo_summary$ydstogo, col = heat.colors(length(ydstogo_summary\$went_for_it_rate)), \# Color fill xlab = "Yards to Go", ylab = "Went For It Rate", main = "Went For It Rate by Yards to Go", border = "white")
```

4th down by yardline

```{r, echo = FALSE}
yardline_summary \<- fourth_downs_first %\>% group_by(yardline_100) %\>% summarize(count = n(), went_for_it_rate = mean(went_for_it)) %\>% filter(count \>= 5)

# Create the barplot

barplot(yardline_summary$went_for_it_rate, names.arg = yardline_summary$yardline_100, col = heat.colors(length(yardline_summary\$went_for_it_rate)), \# Color fill xlab = "Yardline", ylab = "Went For It Rate", main = "Went For It Rate by Yardline", border = "white")
```

Win Probability

```{r, echo = FALSE}
\# Summarize the data wp_summary \<- fourth_downs_first %\>% mutate(wp_rounded = round(wp, 2)) %\>% group_by(wp_rounded) %\>% summarize(count = n(), went_for_it_rate = mean(went_for_it))

# Create the barplot

barplot(wp_summary$went_for_it_rate, names.arg = wp_summary$wp_rounded, col = heat.colors(length(wp_summary\$went_for_it_rate)), \# Color fill xlab = "Win Probability (Rounded)", ylab = "Went For It Rate", main = "Went For It Rate by Win Probability", border = "white")
```

Logistic Regression - Fourth Down Modeling

```{r, echo = FALSE}
log_fourth \<- glm(went_for_it \~ yardline_100 + ydstogo + wp, data = fourth_downs_first)

# Getting the summary

summary(log_fourth)

# Getting the variable importance

vip(log_fourth)

# Accounting for interaction effects

log_fourth_co \<- glm(went_for_it \~ (yardline_100 + ydstogo + wp)\^2, data = fourth_downs_first)

summary(log_fourth_co)
```

Predicted Probability of going for it vs yards to go

```{r, include = FALSE}
fourth_downs_first$pred_prob <- log_fourth$fitted.values

# Create the initial plot (line plot of pred_prob vs. ydstogo)

plot(fourth_downs_first$ydstogo, fourth_downs_first$pred_prob, type = "l", \# Line plot col = "black", lwd = 2, \# Line thickness xlab = "Yards to Go", ylab = "Chance Offense Will Go For It (0-1)", main = "Predicted Probability of Going for It vs. Yards to Go")

# Overlay points: different colors for went_for_it == 1 and 0

points(fourth_downs_first$ydstogo[fourth_downs_first$went_for_it == 1\], fourth_downs_first$went_for_it[fourth_downs_first$went_for_it == 1\], col = "darkgreen", pch = 19, cex = 0.7 \# Point size )

points(fourth_downs_first$ydstogo[fourth_downs_first$went_for_it == 0\], fourth_downs_first$went_for_it[fourth_downs_first$went_for_it == 0\], col = "darkred", pch = 19, cex = 0.7)

# Optional: Add a legend to indicate the color coding

legend("topright", legend = c("Went for it", "Did not go for it"), col = c("darkgreen", "darkred"), pch = 19, bty = "n")
```

\^fix this graph lool

```{r, include = FALSE}
\## 4th down Modeling fourth_downs_first \<- fourth_downs_first \|\> mutate(pred_prob = log_fourth\$fitted.values) \|\> mutate(fourth_oe = went_for_it - pred_prob)

team_fourth_first \<- fourth_downs_first \|\> filter(season \>= 1999 & season \<= 2010) \|\> group_by(posteam) \|\> summarize(count = n(), exp_fourths = sum(pred_prob), actual_fourths = sum(went_for_it), fourths_oe = sum(fourth_oe)) \|\> left_join(teams_colors_logos, by = c("posteam" = "team_abbr"))

# Getting fourth down go's over expected

fourth_downs_first \<- fourth_downs_first \|\> mutate(pred_prob = log_fourth\$fitted.values) \|\> mutate(fourth_oe = went_for_it - pred_prob)

team_fourth_first \<- fourth_downs_first \|\> filter(season \>= 1999 & season \<= 2010) \|\> group_by(posteam) \|\> summarize(count = n(), exp_fourths = sum(pred_prob), actual_fourths = sum(went_for_it), fourths_oe = sum(fourth_oe)) \|\> left_join(teams_colors_logos, by = c("posteam" = "team_abbr"))

team_fourth_long \<- team_fourth_first \|\> select(posteam, actual_fourths, exp_fourths, team_logo_espn) \|\> pivot_longer(cols = c(actual_fourths, exp_fourths), names_to = "type", values_to = "value")
```

4th down actual vs expected

```{r, echo = FALSE}
ggplot(team_fourth_long, aes(x = posteam, y = value, color = type)) + geom_point(position = position_jitter(width = 0.2), size = 4) + geom_image(aes(image = team_logo_espn), position = position_jitter(width = 0.2), size = 0.05, asp = 16/9) + theme_minimal() + labs(x = "Teams", y = "Number of 4th Downs", title = "Team 4th Down Actual vs Expected Go's", subtitle = "1999-2010") + scale_color_manual(values = c("actual_fourths" = "skyblue", "exp_fourths" = "lightgreen"), name = "Type", labels = c("Actual 4th Downs", "Expected 4th Downs")) + theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "top")
```

\^ make this not ggplot

**Boxplot**

```{r pressure, echo=FALSE}
run_plays_with_gap = long_pbp[!is.na(long_pbp$run_gap) |!is.na(long_pbp$run_location), ]
# Ensure data is numeric and factors are correctly set
run_plays_with_gap$yards_gained <- as.numeric(run_plays_with_gap$yards_gained)
run_plays_with_gap$run_gap <- as.factor(run_plays_with_gap$run_gap)
run_plays_with_gap$run_location <- as.factor(run_plays_with_gap$run_location)

# Create run_gap_location if not already done
run_plays_with_gap$run_gap_location <- interaction(run_plays_with_gap$run_gap, run_plays_with_gap$run_location)

# Calculate counts for each group
counts <- table(run_plays_with_gap$run_gap_location)

# Set minimum number of data points required
min_count <- 100

# Filter the data to include only groups with enough data points
filtered_data <- run_plays_with_gap[run_plays_with_gap$run_gap_location %in% names(counts[counts >= min_count]), ]
filtered_data$run_gap_location <- droplevels(filtered_data$run_gap_location)
# Create the boxplot with filtered data
boxplot(filtered_data$yards_gained ~ filtered_data$run_gap_location,
                       main = 'Yards gained on each run play',
                       xlab = 'Run gap and location', ylab = 'Yards gained',
                       outline = FALSE, las = 2, cex.axis = 0.7)  # Adjust cex.axis to control x-axis label size

# Get the counts for filtered data
filtered_counts <- table(filtered_data$run_gap_location)

# Rotate labels and move xlabel further away
par(mar = c(7, 4, 4, 2) + 0.1)

#boxplot_obj
```

There is not a huge statistically significant difference in the effeciencies of run plays in different gaps. While inside runs to the tackle and guard are generally safer (small potential for a big loss), they also have a lower potential for a big gain. On the other hand, run plays to the outside have a much larger potential for gain but also a larger potential for a big loss. There's also no notable difference between running to the left and right.

```{r}
#install.packages("nflreadr")
library(nflreadr)
library(dplyr)
data <- load_schedules(seasons = 1999:2023) |>                                              
  filter(game_type == "REG")

data$home_team <- paste0(data$home_team, " ", data$season)
data$away_team <- paste0(data$away_team, " ", data$season)

team_matrix_home <- model.matrix(~ home_team, data = data)
team_matrix_away <- model.matrix(~ away_team, data = data)
team_matrix <- team_matrix_home - team_matrix_away  

team_data <- as.data.frame(team_matrix[, -1])
names(team_data) <- sort(unique(data$home_team))[-1]

linear_model <- lm(data$result ~ ., data = team_data)
#summary(linear_model)    

team_strength <- data.frame(
  team = names(coef(linear_model))[-1],
  strength = coef(linear_model)[-1]
)

logistic_model <- glm(data$result > 0 ~ ., data = team_data, family = binomial())
#summary(logistic_model)

team_strength_2 <- data.frame(
  team = names(coef(logistic_model))[-1],
  strength = coef(logistic_model)[-1]
)

# Step 1: Extract the top 15 teams from both ordered dataframes
top_15_model_1 <- team_strength_ordered %>% top_n(15, strength)
top_15_model_2 <- team_strength_ordered_2 %>% top_n(15, strength)

# Step 2: Combine these teams into one dataframe
combined_teams <- full_join(top_15_model_1, top_15_model_2, by = "team", suffix = c("_model_1", "_model_2"))

# Step 3: Fill NA values with 0 or any appropriate value
combined_teams <- combined_teams %>%
  mutate(
    strength_model_1 = ifelse(is.na(strength_model_1), 0, strength_model_1),
    strength_model_2 = ifelse(is.na(strength_model_2), 0, strength_model_2)
  )

#combined_teams

n <- nrow(combined_teams)
strength_diff_model_1 <- outer(combined_teams$strength_model_1, combined_teams$strength_model_1, "-")
strength_diff_model_2 <- outer(combined_teams$strength_model_2, combined_teams$strength_model_2, "-")

create_heatmap_with_legend <- function(matrix, title) {
  filled.contour(
    x = 1:n, y = 1:n, z = t(matrix)[, n:1],
    color.palette = heat.colors,
    plot.title = title(main = title),
    plot.axes = {
      axis(1, at = 1:n, labels = combined_teams$team_season, las = 2, cex.axis = 0.7)
      axis(2, at = 1:n, labels = rev(combined_teams$team_season), las = 2, cex.axis = 0.7)
    },
    xlab = "Teams", ylab = "Teams"
  )
}

# Plot heatmaps
par(mfrow = c(1, 2))  # Plot side by side
create_heatmap(strength_diff_model_1, "Strength Difference Using Metric 1")
create_heatmap(strength_diff_model_2, "Strength Difference Using Metric 2")
```

Interpretation: We created two different metrics to assess the strengths of teams in the years 1999 to 2023, and we took the 15 strongest teams using each metric. Then, combining those lists we got a total of 23 teams, and calculated the difference in strengths between every combination of those teams using each metric. We found that in general metric 1 gives more consistent results with regards to the head to head results.


```{r}
tbrady_passes <- long_pbp %>%
  filter(passer == 'T.Brady' & 
         play_type != 'no_play' & 
         incomplete_pass != 1 & 
         interception != 1 & 
         !is.na(air_yards) & 
         !is.na(yards_after_catch))


tbrady_passes <- tbrady_passes %>%
  arrange(desc(receiver_id))

top_receivers <- tbrady_passes %>%
  group_by(receiver_id, receiver) %>%  # Group by receiver_id and receiver
  summarize(
    total_yards_gained = sum(yards_gained, na.rm = TRUE),  # Sum yards_gained
    num_recs = n(),  # Count of plays for each receiver
    total_air_yards = sum(air_yards, na.rm = TRUE),  # Sum of air yards
    total_yards_after_catch = sum(yards_after_catch, na.rm = TRUE),  # Sum of yards after catch
    .groups = 'drop'  # Ungroup after summarizing
  )

top_receivers <- top_receivers %>%
  arrange(desc(total_yards_gained)) %>%  # Sort in descending order
  slice_head(n = 20)  # Take the top 20 rows

player_positions <- data.frame(
  receiver = c("R.Gronkowski", "J.Edelman", "W.Welker", "M.Evans", "C.Godwin", 
               "J.White", "R.Moss", "D.Amendola", "A.Hernandez", "C.Hogan", 
               "D.Branch", "B.Watson", "B.LaFell", "L.Fournette", "K.Faulk", 
               "S.Vereen", "B.Cooks", "A.Brown", "D.Woodhead", "B.Lloyd"),
  position = c("TE", "WR", "WR", "WR", "WR", 
               "RB", "WR", "WR", "TE", "WR", 
               "WR", "TE", "WR", "RB", "RB", 
               "RB", "WR", "WR", "RB", "WR")
)

# Append the positions to the top_receivers dataframe
top_receivers <- top_receivers %>%
  left_join(player_positions, by = "receiver")

top_receivers <- top_receivers %>%
  mutate(
    air_yards_per_rec = total_air_yards / num_recs,
    yards_after_catch_per_rec = total_yards_after_catch / num_recs
  )

top_receivers <- top_receivers %>%
  filter(!is.na(air_yards_per_rec) & !is.na(yards_after_catch_per_rec))

ggplot(top_receivers, aes(x = air_yards_per_rec, 
                           y = yards_after_catch_per_rec, 
                           label = receiver, 
                           color = position)) +
  geom_point(size = 3, alpha = 0.7) +
  geom_text(vjust = -0.5, hjust = 0.5, size = 3.5) +
  geom_encircle(aes(fill = position), 
                alpha = 0.1, 
                color = NA, 
                expand = 0.08) +
  labs(
    title = "Air Yards and Yards After Catch per Reception",
    x = "Air Yards per Reception",
    y = "Yards After Catch per Reception"
  ) +
  theme_minimal() +
  theme(legend.position = "right")

```
Interperation: Of Tom Brady's receivers, the running backs tended to have more yards after catch per reception, and the least air yards per reception. However, his tight ends and wide receivers tended to have most of their yards in the air and only a little after the catch. Some of his receivers were especially good at getting a lot of air yards.
```{r}
all_passes <- long_pbp %>% 
  filter(play_type == 'pass' &
         !is.na(passer_id)) %>%
  mutate(
    Complete = complete_pass == "1", TRUE, FALSE
  )

summary_by_passer <- all_passes %>%
  group_by(passer_id) %>%
  summarize(
    passer = first(passer),  # Get the passer corresponding to each passer_id
    num_plays = n(),
    total_air_yards = sum(air_yards, na.rm = TRUE),
    completion_percentage = mean(Complete) * 100
  )

summary_by_passer <- summary_by_passer %>%
  mutate(average_air_yards_per_play = total_air_yards / num_plays) %>%
  filter(num_plays >= 50)

ggplot(summary_by_passer, aes(x = average_air_yards_per_play, y = completion_percentage)) +
  geom_density_2d_filled() +  # Add filled 2D density contours
  labs(
    title = "2D Density Plot of Average Air Yards per Play vs. Completion Percentage",
    x = "Average Air Yards per Play",
    y = "Completion Percentage"
  ) +
  theme_minimal()
```
Most quarterbacks tend to be at 7.5 air yards pre play and a completion percentage at around 55%, and the density is pretty strongly concentrated around that point. There are a small number of quarterbacks who have a very low average air yards per play as well though. 


```{r}
punt_data <- long_pbp %>%
  filter(play_type == "punt") %>%  # Filter for punts
  mutate(return_distance = case_when(
    return_yards >= 0 & return_yards <= 10 ~ "0-10 yards",
    return_yards > 10 & return_yards <= 20 ~ "11-20 yards",
    return_yards > 20 & return_yards <= 30 ~ "21-30 yards",
    return_yards > 30 & return_yards <= 40 ~ "31-40 yards",
    return_yards > 40 & return_yards <= 50 ~ "41-50 yards",
    return_yards > 50 ~ "51+ yards",
    TRUE ~ "No Return"))

punt_data <- mutate(punt_data, year = substring(game_id, 1, 4))

punt_data <- punt_data %>%
  mutate(time_period = case_when(
    year >= 1999 & year <= 2005 ~ "1999-2005",
    year >= 2006 & year <= 2011 ~ "2006-2011",
    year >= 2012 & year <= 2017 ~ "2012-2017",
    year >= 2018 & year <= 2024 ~ "2018-2024"
))

punt_summary_area <- punt_data %>%
  filter(!is.na(return_yards)) %>%
  mutate(category = case_when(
    punt_fair_catch == 1 ~ "Fair Catch",
    return_yards >= 0 & return_yards <= 10 ~ "0-10 yards",
    return_yards > 10 & return_yards <= 30 ~ "11-30 yards",
    return_yards > 30 & return_yards <= 50 ~ "31-50 yards",
    return_yards > 50 ~ "51+ yards"
  )) %>%
  filter(return_distance != "No Return") %>%
  group_by(year, category) %>%
  summarize(count = n(), .groups = 'drop') %>%
  group_by(year) %>%
  mutate(total_punts = sum(count),
         percentage = count / total_punts * 100)  # Calculate percentage

ggplot(punt_summary_area, aes(x = as.numeric(year), y = percentage, fill = category)) +
  geom_area(alpha = 0.8, color = "white", size = 0.5) +  # Stacked area with white outlines
  scale_fill_manual(values = c("#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#66a61e")) +  # Custom color palette
  labs(title = "Percentage of Fair Caught and Returned Punts (1999-2024)",
       subtitle = "Return yardage categories and fair catches over time",
       x = "Year", y = "Percentage of Punts",
       fill = "Punt Outcome") +
  theme_minimal() +
  theme(plot.title = element_text(size = 18, face = "bold"),
        plot.subtitle = element_text(size = 14),
        axis.title = element_text(size = 12),
        legend.position = "bottom",
        legend.title = element_text(size = 12),
        legend.text = element_text(size = 10))
```
Interpretation: The main significant difference between how punting has changed over time is that the amount of fair catches has gone up and the number of short returns have gone down. However, the number of long returns hasn't had a meaningful change.